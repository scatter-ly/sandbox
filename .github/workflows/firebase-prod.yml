# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy to Firebase Hosting in GCP Product Production on Release
on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'GitHub ref to use for deployment. i.e. refs/tags/v0.5.0'
        required: true
        type: string

jobs:
  # NOTE: Each job uses a separate runner/container. Therefore workspaces are not shared! Can use caching as a workaround.
  build_and_deploy_hosting:
    environment: 
      name: prod-hosting
      url: https://portal.app.opencontext.com
    env:
      CI: true
      NODE_OPTIONS: --max-old-space-size=4096
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      # since create-react-app only only uses NODE_ENV of production when running yarn build
      # we'll copy the .env.staging to .env.production for deploying to GCP Product Staging
      - name: Create dot env files and Google SA file
        run: |
          echo "REACT_APP_GCP_ERRORS_PROJECT_KEY=$REACT_APP_GCP_ERRORS_PROJECT_KEY" >> .env.prod
          cp .env.prod .env.production
          echo "$FIREBASE_SERVICE_ACCOUNT" | base64 --decode > firebase-sa.json
          chmod 600 firebase-sa.json
        env:
          REACT_APP_GCP_ERRORS_PROJECT_KEY: '${{ secrets.GCP_ERRORS_ACCOUNT_PRODUCT_PRODUCTION_326216 }}'
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SA_PRODUCT_PRODUCTION_326216_BASE64 }}

      # BEGIN yarn setup
      # The caching in the action does not cache node_modules which is needed to avoid reinstalling
      # Also want to cache the dist directory to avoid rebuilding later for deployment
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-v16-node_modules-${{ github.base_ref }}-client-portal-${{ hashFiles('yarn.lock', 'package.json') }}

      # If we get a cache hit for node_modules, there's no need to run yarn install
      # as all dependencies will be installed already.
      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      # END yarn setup

      - name: check for yarn.lock changes
        run: git diff --quiet origin/main HEAD -- yarn.lock
        continue-on-error: true

      - name: lock
        run: yarn lock:check

      - name: lint
        run: yarn lint

      - name: type checking and declarations
        run: yarn tsc:full

      - name: Build app
        id: yarn-clean-build-hosting
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=${PWD}/firebase-sa.json
          yarn clean && yarn env:prod && yarn build

      - name: Deploy everything except hosting and functions to Product Staging
        id: deploy-except-hosting-functions-prod
        if: ${{ steps.yarn-clean-build-hosting.outcome == 'success' }}
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=${PWD}/firebase-sa.json
          yarn firebase deploy --except hosting,functions
          rm -f firebase-sa.json

      - name: Deploy to Firebase Hosting in Product Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        if: ${{ steps.deploy-except-hosting-functions-prod.outcome == 'success' }}
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SA_PRODUCT_PRODUCTION_326216 }}'
          channelId: live
          projectId: product-production-326216

  build_and_deploy_functions:
    environment: prod-fn-shipsecrets
    env:
      CI: true
      NODE_OPTIONS: --max-old-space-size=4096
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      # since create-react-app only only uses NODE_ENV of production when running yarn build
      # we'll copy the .env.staging to .env.production for deploying to GCP Product Staging
      - name: Create dot env files and Google SA file
        run: |
          echo "REACT_APP_GCP_ERRORS_PROJECT_KEY=$REACT_APP_GCP_ERRORS_PROJECT_KEY" >> .env.prod
          cp .env.prod .env.production
          echo "$FIREBASE_SERVICE_ACCOUNT" | base64 --decode > firebase-sa.json
          chmod 600 firebase-sa.json
        env: 
          REACT_APP_GCP_ERRORS_PROJECT_KEY: '${{ secrets.GCP_ERRORS_ACCOUNT_PRODUCT_PRODUCTION_326216 }}'
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SA_PRODUCT_PRODUCTION_326216_BASE64 }}

      # BEGIN yarn setup
      # The caching in the action does not cache node_modules which is needed to avoid reinstalling
      # Also want to cache the dist directory to avoid rebuilding later for deployment
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
          cache-dependency-path: 'functions/yarn.lock'

      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-v16-node_modules-${{ github.base_ref }}-client-portal-function-${{ hashFiles('functions/yarn.lock', 'functions/package.json') }}

      # If we get a cache hit for node_modules, there's no need to run yarn install
      # as all dependencies will be installed already.
      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn --cwd functions install --frozen-lockfile

      # END yarn setup

      - name: check for yarn.lock changes
        run: git diff --quiet origin/main HEAD -- functions/yarn.lock
        continue-on-error: true

      - name: lock
        run: yarn --cwd functions lock:check

      - name: lint
        run: yarn --cwd functions lint

      - name: type checking and declarations
        run: yarn --cwd functions tsc

      - name: clean and build changes for prod
        id: yarn-clean-build-function
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=${PWD}/firebase-sa.json
          yarn --cwd functions clean && yarn --cwd functions build:prod

      - name: Deploy Cloud Function to Google Product Staging
        if: ${{ steps.yarn-clean-build-function.outcome == 'success' }}
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=${PWD}/firebase-sa.json
          yarn --cwd functions deploy:prod
          rm -f firebase-sa.json
