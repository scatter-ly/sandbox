# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy to Firebase Hosting in GCP Product Development and Product QA on Merge
on:
  push:
    paths:
      - src/**
      - public/**
      - package.json
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_deploy:
    environment:
      name: qa-hosting
      url: https://portal.qa.opencontext.com
    env:
      CI: true
      NODE_OPTIONS: --max-old-space-size=4096

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # since create-react-app only only uses NODE_ENV of production when running yarn build
      # we'll copy the .env.test to .env.production for deploying to GCP Product Development
      - name: Create dot env files and Google SA file
        run: |
          echo "REACT_APP_GCP_ERRORS_PROJECT_KEY=$REACT_APP_GCP_ERRORS_PROJECT_KEY" >> .env.test
          cp .env.test .env.production
          echo "$FIREBASE_SERVICE_ACCOUNT_DEV" | base64 --decode > firebase-sa-dev.json
          chmod 600 firebase-sa-dev.json
        env: 
          REACT_APP_GCP_ERRORS_PROJECT_KEY: '${{ secrets.GCP_ERRORS_ACCOUNT_PRODUCT_DEVELOPMENT_326216 }}'
          FIREBASE_SERVICE_ACCOUNT_DEV: ${{ secrets.FIREBASE_SA_PRODUCT_DEVELOPMENT_326216_BASE64 }}

      # BEGIN yarn setup
      # The caching in the action does not cache node_modules which is needed to avoid reinstalling
      # Also want to cache the dist directory to avoid rebuilding later for deployment
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-v16-node_modules-${{ github.base_ref }}-client-portal-${{ hashFiles('yarn.lock', 'package.json') }}

      # If we get a cache hit for node_modules, there's no need to run yarn install
      # as all dependencies will be installed already.
      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile 

      # END yarn setup

      - name: check for yarn.lock changes
        id: yarn-lock
        run: git diff --quiet origin/main HEAD -- yarn.lock
        continue-on-error: true

      - name: lock
        run: yarn lock:check

      - name: lint
        run: yarn lint

      - name: type checking and declarations
        run: yarn tsc:full

      # Using env:test since this will change the authDomain to portal.dev.opencontext.com
      - name: Build app for Development
        id: yarn-clean-build-dev
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=${PWD}/firebase-sa-dev.json
          yarn clean && yarn env:test && yarn build
      
      - name: Deploy everything except hosting and functions to Product Development
        id: deploy-except-hosting-functions-dev
        if: ${{ steps.yarn-clean-build-dev.outcome == 'success' }}
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=${PWD}/firebase-sa-dev.json
          yarn firebase deploy --except hosting,functions
          rm -f ${PWD}/firebase-sa-dev.json

      - name: Deploy to Firebase Hosting in Product Development
        id: deploy-to-dev
        uses: FirebaseExtended/action-hosting-deploy@v0
        if: ${{ steps.deploy-except-hosting-functions-dev.outcome == 'success' }} 
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SA_PRODUCT_DEVELOPMENT_326216 }}'
          channelId: live
          projectId: product-development-326216

      - name: Change environment to QA and build
        id: change-to-qa-build
        if: ${{ steps.deploy-to-dev.outcome == 'success' }} 
        run: |
          echo "REACT_APP_GCP_ERRORS_PROJECT_KEY=$REACT_APP_GCP_ERRORS_PROJECT_KEY" >> .env.qa
          cp .env.qa .env.production
          echo "$FIREBASE_SERVICE_ACCOUNT_QA" | base64 --decode > firebase-sa-qa.json
          chmod 600 firebase-sa-qa.json

          export GOOGLE_APPLICATION_CREDENTIALS=${PWD}/firebase-sa-qa.json
          yarn clean && yarn env:qa && yarn build
        env: 
          REACT_APP_GCP_ERRORS_PROJECT_KEY: '${{ secrets.GCP_ERRORS_ACCOUNT_PRODUCT_QA_360418 }}'
          FIREBASE_SERVICE_ACCOUNT_QA: ${{ secrets.FIREBASE_SA_PRODUCT_QA_360418_BASE64 }}

      - name: Deploy everything except hosting and functions to Product QA
        id: deploy-except-hosting-functions-qa
        if: ${{ steps.change-to-qa-build.outcome == 'success' }}
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=${PWD}/firebase-sa-qa.json
          yarn firebase deploy --except hosting,functions
          rm -f ${PWD}/firebase-sa-qa.json

      - name: Deploy to Firebase Hosting in Product QA
        uses: FirebaseExtended/action-hosting-deploy@v0
        if: ${{ steps.deploy-except-hosting-functions-qa.outcome == 'success' }} 
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SA_PRODUCT_QA_360418 }}'
          channelId: live
          projectId: product-qa-360418
